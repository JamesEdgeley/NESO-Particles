<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceNESO_1_1Particles" kind="namespace" language="C++">
    <compoundname>NESO::Particles</compoundname>
    <innerclass refid="classNESO_1_1Particles_1_1ColumnMajorColumnAccessor" prot="public">NESO::Particles::ColumnMajorColumnAccessor</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ColumnMajorRowAccessor" prot="public">NESO::Particles::ColumnMajorRowAccessor</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1RawPointerColumnMajorColumnAccessor" prot="public">NESO::Particles::RawPointerColumnMajorColumnAccessor</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1RawPointerColumnMajorRowAccessor" prot="public">NESO::Particles::RawPointerColumnMajorRowAccessor</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CartesianPeriodic" prot="public">NESO::Particles::CartesianPeriodic</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CartesianHMeshLocalMapperT" prot="public">NESO::Particles::CartesianHMeshLocalMapperT</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CartesianCellBin" prot="public">NESO::Particles::CartesianCellBin</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1LayerCompressor" prot="public">NESO::Particles::LayerCompressor</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CellMove" prot="public">NESO::Particles::CellMove</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CommPair" prot="public">NESO::Particles::CommPair</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1SYCLTarget" prot="public">NESO::Particles::SYCLTarget</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BufferBase" prot="public">NESO::Particles::BufferBase</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BufferDevice" prot="public">NESO::Particles::BufferDevice</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BufferShared" prot="public">NESO::Particles::BufferShared</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BufferHost" prot="public">NESO::Particles::BufferHost</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BufferDeviceHost" prot="public">NESO::Particles::BufferDeviceHost</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1EventStack" prot="public">NESO::Particles::EventStack</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1NDRangePeel1D" prot="public">NESO::Particles::NDRangePeel1D</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1BlockedBinaryNode" prot="public">NESO::Particles::BlockedBinaryNode</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1BlockedBinaryTree" prot="public">NESO::Particles::BlockedBinaryTree</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CellDat" prot="public">NESO::Particles::CellDat</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1CellDatConstDeviceType" prot="public">NESO::Particles::CellDatConstDeviceType</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1CellDatConstDeviceTypeConst" prot="public">NESO::Particles::CellDatConstDeviceTypeConst</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CellDatConst" prot="public">NESO::Particles::CellDatConst</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleLoop" prot="public">NESO::Particles::ParticleLoop</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleDatT" prot="public">NESO::Particles::ParticleDatT</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CellDataT" prot="public">NESO::Particles::CellDataT</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1DescendantProductsGet" prot="public">NESO::Particles::DescendantProductsGet</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1DescendantProducts" prot="public">NESO::Particles::DescendantProducts</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1GlobalArray" prot="public">NESO::Particles::GlobalArray</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1LocalArray" prot="public">NESO::Particles::LocalArray</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ProductMatrixGet" prot="public">NESO::Particles::ProductMatrixGet</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ProductMatrixGetConst" prot="public">NESO::Particles::ProductMatrixGetConst</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ProductMatrixSpec" prot="public">NESO::Particles::ProductMatrixSpec</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ProductMatrix" prot="public">NESO::Particles::ProductMatrix</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1SymVector" prot="public">NESO::Particles::SymVector</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1DepartingIdentify" prot="public">NESO::Particles::DepartingIdentify</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1Domain" prot="public">NESO::Particles::Domain</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ErrorPropagate" prot="public">NESO::Particles::ErrorPropagate</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1MeshHierarchyGlobalMap" prot="public">NESO::Particles::MeshHierarchyGlobalMap</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1GlobalMove" prot="public">NESO::Particles::GlobalMove</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1GlobalMoveExchange" prot="public">NESO::Particles::GlobalMoveExchange</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1LocalMapper" prot="public">NESO::Particles::LocalMapper</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1DummyLocalMapperT" prot="public">NESO::Particles::DummyLocalMapperT</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1LocalMove" prot="public">NESO::Particles::LocalMove</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleLoopBase" prot="public">NESO::Particles::ParticleLoopBase</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ParticleLoopIndex" prot="public">NESO::Particles::ParticleLoopIndex</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1MeshHierarchy" prot="public">NESO::Particles::MeshHierarchy</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1MeshHierarchyDeviceMapper" prot="public">NESO::Particles::MeshHierarchyDeviceMapper</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1MeshHierarchyMapper" prot="public">NESO::Particles::MeshHierarchyMapper</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1HMesh" prot="public">NESO::Particles::HMesh</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1CartesianHMesh" prot="public">NESO::Particles::CartesianHMesh</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1LocalDecompositionHMesh" prot="public">NESO::Particles::LocalDecompositionHMesh</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticlePacker" prot="public">NESO::Particles::ParticlePacker</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleUnpacker" prot="public">NESO::Particles::ParticleUnpacker</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ParticleDatVersionT" prot="public">NESO::Particles::ParticleDatVersionT</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleGroup" prot="public">NESO::Particles::ParticleGroup</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1H5Part" prot="public">NESO::Particles::H5Part</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleRemover" prot="public">NESO::Particles::ParticleRemover</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleSet" prot="public">NESO::Particles::ParticleSet</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1Sym" prot="public">NESO::Particles::Sym</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleProp" prot="public">NESO::Particles::ParticleProp</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleSpec" prot="public">NESO::Particles::ParticleSpec</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1SymStore" prot="public">NESO::Particles::SymStore</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleLoopSubGroup" prot="public">NESO::Particles::ParticleLoopSubGroup</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ParticleSubGroup" prot="public">NESO::Particles::ParticleSubGroup</innerclass>
    <innerclass refid="structNESO_1_1Particles_1_1ProfileEntry" prot="public">NESO::Particles::ProfileEntry</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1ProfileMap" prot="public">NESO::Particles::ProfileMap</innerclass>
    <innerclass refid="classNESO_1_1Particles_1_1VTKMeshHierarchyCellsWriter" prot="public">NESO::Particles::VTKMeshHierarchyCellsWriter</innerclass>
    <innernamespace refid="namespaceNESO_1_1Particles_1_1Access">NESO::Particles::Access</innernamespace>
    <innernamespace refid="namespaceNESO_1_1Particles_1_1ParticleLoopImplementation">NESO::Particles::ParticleLoopImplementation</innernamespace>
    <innernamespace refid="namespaceNESO_1_1Particles_1_1ParticleSubGroupImplementation">NESO::Particles::ParticleSubGroupImplementation</innernamespace>
    <innernamespace refid="namespaceNESO_1_1Particles_1_1Tuple">NESO::Particles::Tuple</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a897f23893a83614b3f78e2f08d7aad71" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1SYCLTarget" kindref="compound">SYCLTarget</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;SYCLTarget&gt; NESO::Particles::SYCLTargetSharedPtr</definition>
        <argsstring></argsstring>
        <name>SYCLTargetSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" line="289" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a8e7fbe7ef590c74d586c09da58870f8d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1CellDataT" kindref="compound">CellDataT</ref>&lt; T &gt; &gt;</type>
        <definition>using NESO::Particles::CellData = typedef std::shared_ptr&lt;CellDataT&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>CellData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/cell_data.hpp" line="95" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/cell_data.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a35560e9559a0a254e218ba54c08c3204" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>using NESO::Particles::GlobalArrayImplGetT = typedef T *</definition>
        <argsstring></argsstring>
        <name>GlobalArrayImplGetT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/global_array.hpp" line="22" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/global_array.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a9f23675b1b14a8be48d5b433693195ed" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T const *</type>
        <definition>using NESO::Particles::GlobalArrayImplGetConstT = typedef T const *</definition>
        <argsstring></argsstring>
        <name>GlobalArrayImplGetConstT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/global_array.hpp" line="23" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/global_array.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1ace175e00be7a1c9efaba24beda93cc3e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>using NESO::Particles::LocalArrayImplGetT = typedef T *</definition>
        <argsstring></argsstring>
        <name>LocalArrayImplGetT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/local_array.hpp" line="17" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/local_array.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1adf82d96678d242f3d20d120a78b5f7e4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T const *</type>
        <definition>using NESO::Particles::LocalArrayImplGetConstT = typedef T const *</definition>
        <argsstring></argsstring>
        <name>LocalArrayImplGetConstT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/local_array.hpp" line="18" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/local_array.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a2036902331af5fea0fcb270cfd6170fc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T ****</type>
        <definition>using NESO::Particles::SymVectorImplGetT = typedef T ****</definition>
        <argsstring></argsstring>
        <name>SymVectorImplGetT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" line="18" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1aa900ac23bad7d69c2ee62ace9696890d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *const *const **</type>
        <definition>using NESO::Particles::SymVectorImplGetConstT = typedef T *const *const **</definition>
        <argsstring></argsstring>
        <name>SymVectorImplGetConstT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" line="19" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a5ee96de18cd5766f9fc2ff2b719e6ad5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1SymVector" kindref="compound">SymVector</ref>&lt; T &gt; &gt;</type>
        <definition>using NESO::Particles::SymVectorSharedPtr = typedef std::shared_ptr&lt;SymVector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>SymVectorSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" line="260" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1ae44a4731c000de97b12328292de6b7c5" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1Domain" kindref="compound">Domain</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;Domain&gt; NESO::Particles::DomainSharedPtr</definition>
        <argsstring></argsstring>
        <name>DomainSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/domain.hpp" line="45" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/domain.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a7556c18624e086cb8721c30ac70552a1" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1LocalMapper" kindref="compound">LocalMapper</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;LocalMapper&gt; NESO::Particles::LocalMapperSharedPtr</definition>
        <argsstring></argsstring>
        <name>LocalMapperSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/local_mapping.hpp" line="43" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/local_mapping.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ParticleLoopBase" kindref="compound">ParticleLoopBase</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;ParticleLoopBase&gt; NESO::Particles::ParticleLoopSharedPtr</definition>
        <argsstring></argsstring>
        <name>ParticleLoopSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop_base.hpp" line="95" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop_base.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1af1414ddefa54150d126f00f41e5b747d" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1HMesh" kindref="compound">HMesh</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;HMesh&gt; NESO::Particles::HMeshSharedPtr</definition>
        <argsstring></argsstring>
        <name>HMeshSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/mesh_interface.hpp" line="115" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/mesh_interface.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a072de8fe41e7c3032cea5a3c577b6981" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1CartesianHMesh" kindref="compound">CartesianHMesh</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;CartesianHMesh&gt; NESO::Particles::CartesianHMeshSharedPtr</definition>
        <argsstring></argsstring>
        <name>CartesianHMeshSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/mesh_interface.hpp" line="415" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/mesh_interface.hpp" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a40440ca7be104e7a3cc72b43b839e2a6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T ***</type>
        <definition>using NESO::Particles::ParticleDatImplGetT = typedef T ***</definition>
        <argsstring></argsstring>
        <name>ParticleDatImplGetT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" line="35" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1ab57d44f62ea102bdb35a06ab150222e1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *const *const *</type>
        <definition>using NESO::Particles::ParticleDatImplGetConstT = typedef T *const *const *</definition>
        <argsstring></argsstring>
        <name>ParticleDatImplGetConstT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" line="36" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ParticleDatT" kindref="compound">ParticleDatT</ref>&lt; T &gt; &gt;</type>
        <definition>using NESO::Particles::ParticleDatSharedPtr = typedef std::shared_ptr&lt;ParticleDatT&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ParticleDatSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" line="551" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; ParticleGroup &gt; NESO::Particles::ParticleGroupSharedPtr</definition>
        <argsstring></argsstring>
        <name>ParticleGroupSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_group.hpp" line="833" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_group.hpp" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1aaee68f5229fd2541814a450ad90eb6cf" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ParticleSet" kindref="compound">ParticleSet</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;ParticleSet&gt; NESO::Particles::ParticleSetSharedPtr</definition>
        <argsstring></argsstring>
        <name>ParticleSetSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_set.hpp" line="163" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_set.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;ParticleSubGroup&gt; NESO::Particles::ParticleSubGroupSharedPtr</definition>
        <argsstring></argsstring>
        <name>ParticleSubGroupSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="496" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a15dc55e8042484773cf877b8058eb67b" prot="public" static="no">
        <type>double</type>
        <definition>typedef double NESO::Particles::REAL</definition>
        <argsstring></argsstring>
        <name>REAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="112" column="16" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceNESO_1_1Particles_1a4eac77e3de191a85cc05f4b1700cd605" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t NESO::Particles::INT</definition>
        <argsstring></argsstring>
        <name>INT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="113" column="17" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceNESO_1_1Particles_1ac24d673e917184357690c85a8cae409c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int NESO::Particles::mask</definition>
        <argsstring></argsstring>
        <name>mask</name>
        <initializer>= std::numeric_limits&lt;int&gt;::min()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/mesh_hierarchy.hpp" line="18" column="11" bodyfile="/tmp/repo-checkout/NESO-Particles/include/mesh_hierarchy.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a8dec9607382859741953383f51bcd446" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1CartesianHMeshLocalMapperT" kindref="compound">CartesianHMeshLocalMapperT</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CartesianHMeshLocalMapperT&gt; NESO::Particles::CartesianHMeshLocalMapper</definition>
        <argsstring>(SYCLTargetSharedPtr sycl_target, CartesianHMeshSharedPtr mesh)</argsstring>
        <name>CartesianHMeshLocalMapper</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a897f23893a83614b3f78e2f08d7aad71" kindref="member">SYCLTargetSharedPtr</ref></type>
          <declname>sycl_target</declname>
        </param>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a072de8fe41e7c3032cea5a3c577b6981" kindref="member">CartesianHMeshSharedPtr</ref></type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/cartesian_mesh.hpp" line="289" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/cartesian_mesh.hpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aff8ce126d08385f7d6e54d0fca0d3e8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>MPI_Datatype</type>
        <definition>MPI_Datatype NESO::Particles::map_ctype_mpi_type</definition>
        <argsstring>()</argsstring>
        <name>map_ctype_mpi_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For an input data type T get the matching MPI Datatype.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Input argument of type T. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MPI_Datatype that matches the input type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/communication.hpp" line="132" column="33" bodyfile="/tmp/repo-checkout/NESO-Particles/include/communication.hpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a1ded7f6b696ceae64f0e386a19fc9e85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int NESO::Particles::get_local_mpi_rank</definition>
        <argsstring>(MPI_Comm comm, int default_rank=-1)</argsstring>
        <name>get_local_mpi_rank</name>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_rank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine a local MPI rank based on environment variables and shared memory splitting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI_Comm to try and deduce local rank from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) MPI rank to use if one cannot be determined from environment variables or SHM intra comm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" line="30" column="12" bodyfile="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" bodystart="30" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a2390c80a098101e7a54f2c843cccf917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>D</declname>
            <defname>D</defname>
          </param>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event NESO::Particles::buffer_memcpy</definition>
        <argsstring>(D&lt; T &gt; &amp;dst, S&lt; T &gt; &amp;src)</argsstring>
        <name>buffer_memcpy</name>
        <param>
          <type>D&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>S&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the contents of a buffer, e.g. <ref refid="classNESO_1_1Particles_1_1BufferDevice" kindref="compound">BufferDevice</ref>, <ref refid="classNESO_1_1Particles_1_1BufferHost" kindref="compound">BufferHost</ref>, into another buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" line="675" column="21" bodyfile="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" bodystart="675" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a195b5e48d62b7b73debd0cb36e9e3c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sycl::nd_range&lt; 1 &gt;</type>
        <definition>sycl::nd_range&lt;1&gt; NESO::Particles::get_nd_range_1d</definition>
        <argsstring>(const std::size_t size, const std::size_t local_size)</argsstring>
        <name>get_nd_range_1d</name>
        <param>
          <type>const std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>local_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an 1D nd_range for a given iteration set global size and local size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Global iteration set size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Local iteration set size (work group size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nd_range large enough to cover global iteration set. May be larger than size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" line="720" column="23" bodyfile="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" bodystart="720" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a8c99098b85d1e80c42694c3528a5a1b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structNESO_1_1Particles_1_1NDRangePeel1D" kindref="compound">NDRangePeel1D</ref></type>
        <definition>NDRangePeel1D NESO::Particles::get_nd_range_peel_1d</definition>
        <argsstring>(const std::size_t size, const std::size_t local_size)</argsstring>
        <name>get_nd_range_peel_1d</name>
        <param>
          <type>const std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>local_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create two nd_ranges that cover a 1D iteration set. The first is a main iteration set that does not need a mask. The second is an iteration set that requires 1) the offset adding to the iteration index and 2) a conditional to test the resulting index is less than the loop bound.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Global iteration set size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Local iteration set size (SYCL workgroup size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structNESO_1_1Particles_1_1NDRangePeel1D" kindref="compound">NDRangePeel1D</ref> instance describing loop iteration sets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" line="757" column="22" bodyfile="/tmp/repo-checkout/NESO-Particles/include/compute_target.hpp" bodystart="757" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aa6deabc4271b453cf01c32cac1a945fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structNESO_1_1Particles_1_1ProductMatrixSpec" kindref="compound">ProductMatrixSpec</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ProductMatrixSpec&gt; NESO::Particles::product_matrix_spec</definition>
        <argsstring>(ParticleSpec particle_spec)</argsstring>
        <name>product_matrix_spec</name>
        <param>
          <type><ref refid="classNESO_1_1Particles_1_1ParticleSpec" kindref="compound">ParticleSpec</ref></type>
          <declname>particle_spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to create <ref refid="structNESO_1_1Particles_1_1ProductMatrixSpec" kindref="compound">ProductMatrixSpec</ref> instances.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Specification for product particle properties. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/product_matrix.hpp" line="418" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/product_matrix.hpp" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a914c9c125729aade07b9ff53fa35d978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1ProductMatrix" kindref="compound">ProductMatrix</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ProductMatrix&gt; NESO::Particles::product_matrix</definition>
        <argsstring>(SYCLTargetSharedPtr sycl_target, std::shared_ptr&lt; ProductMatrixSpec &gt; spec)</argsstring>
        <name>product_matrix</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a897f23893a83614b3f78e2f08d7aad71" kindref="member">SYCLTargetSharedPtr</ref></type>
          <declname>sycl_target</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structNESO_1_1Particles_1_1ProductMatrixSpec" kindref="compound">ProductMatrixSpec</ref> &gt;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to create <ref refid="classNESO_1_1Particles_1_1ProductMatrix" kindref="compound">ProductMatrix</ref> shared pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sycl_target</parametername>
</parameternamelist>
<parameterdescription>
<para>Device on which particle loops will be executed using the product matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spec</parametername>
</parameternamelist>
<parameterdescription>
<para>A specification for the output particle properties. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/product_matrix.hpp" line="569" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/product_matrix.hpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a99ff0b6f76dbfc0384ee6c74191a5a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1SymVector" kindref="compound">SymVector</ref>&lt; T &gt; &gt;</type>
        <definition>std::shared_ptr&lt;SymVector&lt;T&gt; &gt; NESO::Particles::sym_vector</definition>
        <argsstring>(ParticleGroupSharedPtr particle_group, std::vector&lt; Sym&lt; T &gt;&gt; syms)</argsstring>
        <name>sym_vector</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" kindref="member">ParticleGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym</ref>&lt; T &gt;&gt;</type>
          <declname>syms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to create a <ref refid="classNESO_1_1Particles_1_1SymVector" kindref="compound">SymVector</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syms</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of Syms to use from particle_group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" line="243" column="17" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a811a6521e0e0bad87e67fb167195a244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1SymVector" kindref="compound">SymVector</ref>&lt; T &gt; &gt;</type>
        <definition>std::shared_ptr&lt;SymVector&lt;T&gt; &gt; NESO::Particles::sym_vector</definition>
        <argsstring>(ParticleGroupSharedPtr particle_group, std::initializer_list&lt; Sym&lt; T &gt;&gt; syms)</argsstring>
        <name>sym_vector</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" kindref="member">ParticleGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; <ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym</ref>&lt; T &gt;&gt;</type>
          <declname>syms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to create a <ref refid="classNESO_1_1Particles_1_1SymVector" kindref="compound">SymVector</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>syms</parametername>
</parameternamelist>
<parameterdescription>
<para>Syms to use from particle_group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" line="255" column="17" bodyfile="/tmp/repo-checkout/NESO-Particles/include/containers/sym_vector.hpp" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a2d05e3107b70593881947215c8a27bcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::reset_mpi_ranks</definition>
        <argsstring>(ParticleDatSharedPtr&lt; INT &gt; mpi_rank_dat)</argsstring>
        <name>reset_mpi_ranks</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" kindref="member">ParticleDatSharedPtr</ref>&lt; <ref refid="namespaceNESO_1_1Particles_1a4eac77e3de191a85cc05f4b1700cd605" kindref="member">INT</ref> &gt;</type>
          <declname>mpi_rank_dat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set all components 0 and 1 of particles to -1 in the passed ParticleDat.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mpi_rank_dat</parametername>
</parameternamelist>
<parameterdescription>
<para>ParticleDat containing MPI ranks to reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/global_mapping_impl.hpp" line="211" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/global_mapping_impl.hpp" bodystart="211" bodyend="220" declfile="/tmp/repo-checkout/NESO-Particles/include/global_mapping.hpp" declline="108" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ab99d5d2044bb3ccf4467b3d8f17c9dec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classNESO_1_1Particles_1_1DummyLocalMapperT" kindref="compound">DummyLocalMapperT</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DummyLocalMapperT&gt; NESO::Particles::DummyLocalMapper</definition>
        <argsstring>()</argsstring>
        <name>DummyLocalMapper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/local_mapping.hpp" line="74" column="24" bodyfile="/tmp/repo-checkout/NESO-Particles/include/local_mapping.hpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac8ce793be06689e1febc30afd7b2c09a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(ParticleGroupSharedPtr particle_group, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" kindref="member">ParticleGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> to execute kernel for all particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" line="540" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" bodystart="540" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1add5a24d6b784beb4c4f1b49a8d0e7fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(const std::string name, ParticleGroupSharedPtr particle_group, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" kindref="member">ParticleGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for particle loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> to execute kernel for all particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" line="562" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" bodystart="562" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac39559fd7615177f4bea988330474e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DAT_TYPE</type>
          </param>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(ParticleDatSharedPtr&lt; DAT_TYPE &gt; particle_dat, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" kindref="member">ParticleDatSharedPtr</ref>&lt; DAT_TYPE &gt;</type>
          <declname>particle_dat</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the ParticleDat.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_dat</parametername>
</parameternamelist>
<parameterdescription>
<para>ParticleDat to define the iteration set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" line="583" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" bodystart="583" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a2d2b830cd8c2a23de6ec055664aa035b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DAT_TYPE</type>
          </param>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(const std::string name, ParticleDatSharedPtr&lt; DAT_TYPE &gt; particle_dat, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" kindref="member">ParticleDatSharedPtr</ref>&lt; DAT_TYPE &gt;</type>
          <declname>particle_dat</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the ParticleDat.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for particle loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle_dat</parametername>
</parameternamelist>
<parameterdescription>
<para>ParticleDat to define the iteration set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" line="605" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/loop/particle_loop.hpp" bodystart="605" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac4a7f860e0e3795b10aa4c97a4feda89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::parallel_advection_initialisation</definition>
        <argsstring>(ParticleGroupSharedPtr particle_group, const int num_steps=20)</argsstring>
        <name>parallel_advection_initialisation</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a5b25ad0df23c80f6feed27e2527a5c51" kindref="member">ParticleGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>num_steps</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialisation utility to aid parallel creation of particle distributions. This function performs the all-to-all movement that occurs when a <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> contains particles with positions (far) outside the owned region of space. For example consider if each MPI rank creates N particles uniformly distributed over the entire simulation domain then the call to <computeroutput>hybrid_move</computeroutput> would have a cost equal to the number of MPI ranks squared.</para>
<para>This function gives each particle a temporary position in the owned subdomain then moves the particles in a straight line to the original positions in the positions ParticleDat. It is assumed that the simulation domain is convex.</para>
<para>This function is used by adding particles with <computeroutput><ref refid="classNESO_1_1Particles_1_1ParticleGroup_1a6770d444576949f95e15c0a21c2b9580" kindref="member">ParticleGroup.add_particles_local</ref></computeroutput> on each rank then collectively calling this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> to initialise by moving particles to the positions in the position ParticleDat. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_steps</parametername>
</parameternamelist>
<parameterdescription>
<para>optional number of steps to move particles over. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/parallel_initialisation.hpp" line="152" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/parallel_initialisation.hpp" bodystart="152" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac8c576cdfa97a8900563312ecc17eadf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" kindref="member">ParticleDatSharedPtr</ref>&lt; T &gt;</type>
        <definition>ParticleDatSharedPtr&lt;T&gt; NESO::Particles::ParticleDat</definition>
        <argsstring>(SYCLTargetSharedPtr sycl_target, const Sym&lt; T &gt; sym, int ncomp, int ncell, bool positions=false)</argsstring>
        <name>ParticleDat</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a897f23893a83614b3f78e2f08d7aad71" kindref="member">SYCLTargetSharedPtr</ref></type>
          <declname>sycl_target</declname>
        </param>
        <param>
          <type>const <ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym</ref>&lt; T &gt;</type>
          <declname>sym</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncell</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>positions</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" line="554" column="29" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" bodystart="554" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aed07ff1ec743401767a52a945a285a0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1ac4ef9b71589140a5226f7c1e966c20bb" kindref="member">ParticleDatSharedPtr</ref>&lt; T &gt;</type>
        <definition>ParticleDatSharedPtr&lt;T&gt; NESO::Particles::ParticleDat</definition>
        <argsstring>(SYCLTargetSharedPtr sycl_target, ParticleProp&lt; T &gt; prop, int ncell)</argsstring>
        <name>ParticleDat</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a897f23893a83614b3f78e2f08d7aad71" kindref="member">SYCLTargetSharedPtr</ref></type>
          <declname>sycl_target</declname>
        </param>
        <param>
          <type><ref refid="classNESO_1_1Particles_1_1ParticleProp" kindref="compound">ParticleProp</ref>&lt; T &gt;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" line="561" column="29" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_dat.hpp" bodystart="561" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a6fbbd0c9a0b9d8808c1c6fa9a1a5fc70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NESO::Particles::fixed_width_format</definition>
        <argsstring>(INT value)</argsstring>
        <name>fixed_width_format</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a4eac77e3de191a85cc05f4b1700cd605" kindref="member">INT</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_group_impl.hpp" line="181" column="20" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_group_impl.hpp" bodystart="181" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1adab45acb66663ead4d94f24b76bb0733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string NESO::Particles::fixed_width_format</definition>
        <argsstring>(REAL value)</argsstring>
        <name>fixed_width_format</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a15dc55e8042484773cf877b8058eb67b" kindref="member">REAL</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_group_impl.hpp" line="187" column="20" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_group_impl.hpp" bodystart="187" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aae8159c6ae33e682d9b003ced74639d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PARENT</type>
          </param>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
        <definition>ParticleSubGroupSharedPtr NESO::Particles::particle_sub_group</definition>
        <argsstring>(std::shared_ptr&lt; PARENT &gt; parent, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_sub_group</name>
        <param>
          <type>std::shared_ptr&lt; PARENT &gt;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> based on a kernel and arguments. The selector kernel must be a lambda which returns true for particles which are in the sub group and false for particles which are not in the sub group. The arguments for the selector kernel must be read access Syms, i.e. <ref refid="namespaceNESO_1_1Particles_1_1Access_1a5ac4ad4b7778690c9189204fbc612c14" kindref="member">Access::read</ref>(<ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym&lt;T&gt;</ref>(&quot;name&quot;)).</para>
<para>For example if A is a <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> with an INT <ref refid="classNESO_1_1Particles_1_1ParticleProp" kindref="compound">ParticleProp</ref> &quot;ID&quot; that holds particle ids then the following line creates a <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from the particles with even ids.</para>
<para>auto A_even = std::make_shared&lt;ParticleSubGroup&gt;( A, [=](auto ID) { return ((ID[0] % 2) == 0); }, <ref refid="namespaceNESO_1_1Particles_1_1Access_1a5ac4ad4b7778690c9189204fbc612c14" kindref="member">Access::read</ref>(<ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym&lt;INT&gt;</ref>(&quot;ID&quot;)));</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> or <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from which to form <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Lambda function (like a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> kernel) that returns true for the particles which should be in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments in the form of access descriptors wrapping objects to pass to the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="524" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a22a31c14c8c5d546f49cb2a4d6c2f98b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PARENT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
        <definition>ParticleSubGroupSharedPtr NESO::Particles::particle_sub_group</definition>
        <argsstring>(std::shared_ptr&lt; PARENT &gt; parent)</argsstring>
        <name>particle_sub_group</name>
        <param>
          <type>std::shared_ptr&lt; PARENT &gt;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> which is simply a reference/view into an entire <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. This constructor creates a sub-group which is equivalent to</para>
<para>auto A_all = std::make_shared&lt;ParticleSubGroup&gt;( A, [=]() { return true; } );</para>
<para>but can make additional optimisations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> or <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from which to form <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="546" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="546" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac9e694577f7bf6648d77ea8dc1a1e8d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PARENT</type>
          </param>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
        <definition>ParticleSubGroupSharedPtr NESO::Particles::static_particle_sub_group</definition>
        <argsstring>(std::shared_ptr&lt; PARENT &gt; parent, KERNEL kernel, ARGS... args)</argsstring>
        <name>static_particle_sub_group</name>
        <param>
          <type>std::shared_ptr&lt; PARENT &gt;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a static <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> based on a kernel and arguments. The selector kernel must be a lambda which returns true for particles which are in the sub group and false for particles which are not in the sub group. The arguments for the selector kernel must be read access Syms, i.e. <ref refid="namespaceNESO_1_1Particles_1_1Access_1a5ac4ad4b7778690c9189204fbc612c14" kindref="member">Access::read</ref>(<ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym&lt;T&gt;</ref>(&quot;name&quot;)).</para>
<para>For example if A is a <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> with an INT <ref refid="classNESO_1_1Particles_1_1ParticleProp" kindref="compound">ParticleProp</ref> &quot;ID&quot; that holds particle ids then the following line creates a <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from the particles with even ids.</para>
<para>auto A_even = std::make_shared&lt;ParticleSubGroup&gt;( A, [=](auto ID) { return ((ID[0] % 2) == 0); }, <ref refid="namespaceNESO_1_1Particles_1_1Access_1a5ac4ad4b7778690c9189204fbc612c14" kindref="member">Access::read</ref>(<ref refid="classNESO_1_1Particles_1_1Sym" kindref="compound">Sym&lt;INT&gt;</ref>(&quot;ID&quot;)));</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> or <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from which to form <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Lambda function (like a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> kernel) that returns true for the particles which should be in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments in the form of access descriptors wrapping objects to pass to the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="576" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="576" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a4f9dd2edcc7435ad9e801f6937840f69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PARENT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
        <definition>ParticleSubGroupSharedPtr NESO::Particles::static_particle_sub_group</definition>
        <argsstring>(std::shared_ptr&lt; PARENT &gt; parent)</argsstring>
        <name>static_particle_sub_group</name>
        <param>
          <type>std::shared_ptr&lt; PARENT &gt;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a static <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> which is simply a reference/view into an entire <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref>. This constructor creates a sub-group which is equivalent to</para>
<para>auto A_all = std::make_shared&lt;ParticleSubGroup&gt;( A, [=]() { return true; } );</para>
<para>but can make additional optimisations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent <ref refid="classNESO_1_1Particles_1_1ParticleGroup" kindref="compound">ParticleGroup</ref> or <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> from which to form <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="601" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="601" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a51d51b8fdd422b331bbf8f05076f51a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(ParticleSubGroupSharedPtr particle_group, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> to execute kernel for all particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="757" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="757" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a20343c40afa56a7afc479c070cd5a9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KERNEL</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARGS</declname>
            <defname>ARGS</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceNESO_1_1Particles_1adb62770883a0f2a6ac09c556a4357341" kindref="member">ParticleLoopSharedPtr</ref></type>
        <definition>ParticleLoopSharedPtr NESO::Particles::particle_loop</definition>
        <argsstring>(const std::string name, ParticleSubGroupSharedPtr particle_group, KERNEL kernel, ARGS... args)</argsstring>
        <name>particle_loop</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a8e7fac11babbc252b0d0074d64bb8384" kindref="member">ParticleSubGroupSharedPtr</ref></type>
          <declname>particle_group</declname>
        </param>
        <param>
          <type>KERNEL</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>ARGS...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classNESO_1_1Particles_1_1ParticleLoop" kindref="compound">ParticleLoop</ref> that executes a kernel for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for particle loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle_group</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref> to execute kernel for all particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to execute for all particles in the <ref refid="classNESO_1_1Particles_1_1ParticleSubGroup" kindref="compound">ParticleSubGroup</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The remaining arguments are arguments to be passed to the kernel. All arguments must be wrapped in an access descriptor type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" line="783" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/particle_sub_group.hpp" bodystart="783" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1adc9f456b4e2feaed3199df4ba07eac75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point NESO::Particles::profile_timestamp</definition>
        <argsstring>()</argsstring>
        <name>profile_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a time stamp that can be used with profile_elapsed.</para>
<para><simplesect kind="return"><para>Time stamp. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/profiling.hpp" line="96" column="55" bodyfile="/tmp/repo-checkout/NESO-Particles/include/profiling.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aacbf134855b1ae4b7fbdefbcb8cc1b8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NESO::Particles::profile_elapsed</definition>
        <argsstring>(std::chrono::high_resolution_clock::time_point time_start, std::chrono::high_resolution_clock::time_point time_end)</argsstring>
        <name>profile_elapsed</name>
        <param>
          <type>std::chrono::high_resolution_clock::time_point</type>
          <declname>time_start</declname>
        </param>
        <param>
          <type>std::chrono::high_resolution_clock::time_point</type>
          <declname>time_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute and return the time in seconds between two time stamps created with profile_timestamp.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start time stamp. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_end</parametername>
</parameternamelist>
<parameterdescription>
<para>End time stamp. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Elapsed time in seconds between time stamps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/profiling.hpp" line="109" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/profiling.hpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aa5aa5ba3effdb2ff3929748c8a941b5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int NESO::Particles::reduce_mul</definition>
        <argsstring>(const int nel, std::vector&lt; int &gt; &amp;values)</argsstring>
        <name>reduce_mul</name>
        <param>
          <type>const int</type>
          <declname>nel</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="14" column="19" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a58a7701e1c16ffe089d968f0820e741c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::neso_particles_assert</definition>
        <argsstring>(const char *expr_str, bool expr, const char *file, int line, const char *msg)</argsstring>
        <name>neso_particles_assert</name>
        <param>
          <type>const char *</type>
          <declname>expr_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a helper function to assert conditions are satisfied and terminate execution if not. An error is output on stderr and MPI_Abort is called if MPI is initialised. Users should call the corresponding helper macro NESOASSERT like</para>
<para><ref refid="typedefs_8hpp_1ac780e64fe76ab7e5f6b07c55de92d018" kindref="member">NESOASSERT(conditional, message)</ref>;</para>
<para>To check conditionals within their code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr_str</parametername>
</parameternamelist>
<parameterdescription>
<para>A string identifying the conditional to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bool resulting from the evaluation of the expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename containing the call to neso_particles_assert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Line number for the call to neso_particles assert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to print to stderr on evaluation of conditional to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="50" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="50" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a15e925bc0a6552f710049633183c01b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::neso_particles_warn</definition>
        <argsstring>(const char *expr_str, bool expr, const char *file, int line, const char *msg)</argsstring>
        <name>neso_particles_warn</name>
        <param>
          <type>const char *</type>
          <declname>expr_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a helper function to assert conditions are satisfied and print to stderr if not. A warning is output on stderr. Users should call the corresponding helper macro NESOWARN like</para>
<para><ref refid="typedefs_8hpp_1a6fa47dac66424a8e3c836d769295213b" kindref="member">NESOWARN(conditional, message)</ref>;</para>
<para>To check conditionals within their code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr_str</parametername>
</parameternamelist>
<parameterdescription>
<para>A string identifying the conditional to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bool resulting from the evaluation of the expression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename containing the call to neso_particles_assert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Line number for the call to neso_particles assert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to print to stderr on evaluation of conditional to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="103" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a7e70e7e0a6406d02bf26fa4963560685" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; NESO::Particles::reverse_argsort</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;array)</argsstring>
        <name>reverse_argsort</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="116" column="20" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a202a6eb226f05b938bd3773241b50f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NESO::Particles::get_decomp_1d</definition>
        <argsstring>(const T N_compute_units, const T N_work_items, const T work_unit, T *rstart, T *rend)</argsstring>
        <name>get_decomp_1d</name>
        <param>
          <type>const T</type>
          <declname>N_compute_units</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>N_work_items</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>work_unit</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>rstart</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>rend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="131" column="6" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="131" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a617e737f93036830a23e0b381e02c44b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NESO::Particles::nprint_recurse</definition>
        <argsstring>(int flag, U next)</argsstring>
        <name>nprint_recurse</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>U</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="146" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a56e0c9187a32f5a35f38e1af6910d45a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NESO::Particles::nprint_recurse</definition>
        <argsstring>(int flag, U next, T... args)</argsstring>
        <name>nprint_recurse</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>U</type>
          <declname>next</declname>
        </param>
        <param>
          <type>T...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="154" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a5c30c64658955dcc040138de5223791e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void NESO::Particles::nprint</definition>
        <argsstring>(T... args)</argsstring>
        <name>nprint</name>
        <param>
          <type>T...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="162" column="25" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a299d1b6d8c08acb7f8e1fb6fa06fa887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int NESO::Particles::get_required_mpi_thread_level</definition>
        <argsstring>()</argsstring>
        <name>get_required_mpi_thread_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the MPI thread level required by NESO-Particles. MPI should be initialised by calling MPI_Init_thread with a required thread level greater than or equal to the value returned by this function.</para>
<para><simplesect kind="return"><para>MPI thread level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="219" column="12" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a0dd4eceaa7f7b2715030fbdda84cbaf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::test_provided_thread_level</definition>
        <argsstring>(const int level)</argsstring>
        <name>test_provided_thread_level</name>
        <param>
          <type>const int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test that a provided MPI thread level is sufficient for NESO-Particles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Provided thread level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="226" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a182b23c27c2467294e51b3bbff8869a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::initialise_mpi</definition>
        <argsstring>(int *argc, char ***argv)</argsstring>
        <name>initialise_mpi</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to initialise MPI and check that the provided thread level is sufficient. Calling this function is equivalent to calling MPI_Init_thread with the required thread level from get_required_mpi_thread_level and checking the provided thread level is equal to or greater than this required level.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the number of arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" line="241" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/typedefs.hpp" bodystart="241" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ae28b0a937067e5c00e9401ff73fb2c4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RNG</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; NESO::Particles::uniform_within_extents</definition>
        <argsstring>(const int N, const int ndim, const double *extents, RNG &amp;rng)</argsstring>
        <name>uniform_within_extents</name>
        <param>
          <type>const int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>extents</declname>
        </param>
        <param>
          <type>RNG &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a uniform distribution of particle positions within a set of extents.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extents</parametername>
</parameternamelist>
<parameterdescription>
<para>Extent of each of the dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(N)x(ndim) set of positions stored for each column. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" line="29" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" bodystart="29" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1a9177dd1e204cea852ab99e76de499e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RNG</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; NESO::Particles::normal_distribution</definition>
        <argsstring>(const int N, const int ndim, const double mu, const double sigma, RNG &amp;rng)</argsstring>
        <name>normal_distribution</name>
        <param>
          <type>const int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>RNG &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create (N)x(ndim) set of samples from a Gaussian distribution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean to use for Gaussian distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Sigma to use for Gaussian distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rng</parametername>
</parameternamelist>
<parameterdescription>
<para>RNG to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(N)x(ndim) set of samples stored per column. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" line="57" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" bodystart="57" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ab36e9d15212f4ff29731112924e206ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; NESO::Particles::uniform_within_extents</definition>
        <argsstring>(const int N, const int ndim, const double *extents)</argsstring>
        <name>uniform_within_extents</name>
        <param>
          <type>const int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>extents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a uniform distribution of particle positions within a set of extents.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extents</parametername>
</parameternamelist>
<parameterdescription>
<para>Extent of each of the dimensions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(N)x(ndim) set of positions stored for each column. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" line="81" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1ac5503b9d174146b912fdc2d383e24f03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; NESO::Particles::normal_distribution</definition>
        <argsstring>(const int N, const int ndim, const double mu, const double sigma)</argsstring>
        <name>normal_distribution</name>
        <param>
          <type>const int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create (N)x(ndim) set of samples from a Gaussian distribution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean to use for Gaussian distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Sigma to use for Gaussian distribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(N)x(ndim) set of samples stored per column. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" line="96" column="1" bodyfile="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceNESO_1_1Particles_1aec4562e07b451ce4de54258918c4cd46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NESO::Particles::uniform_within_cartesian_cells</definition>
        <argsstring>(CartesianHMeshSharedPtr mesh, const int npart_per_cell, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;positions, std::vector&lt; int &gt; &amp;cells, std::optional&lt; std::mt19937 &gt; rng_in=std::nullopt)</argsstring>
        <name>uniform_within_cartesian_cells</name>
        <param>
          <type><ref refid="namespaceNESO_1_1Particles_1a072de8fe41e7c3032cea5a3c577b6981" kindref="member">CartesianHMeshSharedPtr</ref></type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>npart_per_cell</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>cells</declname>
        </param>
        <param>
          <type>std::optional&lt; std::mt19937 &gt;</type>
          <declname>rng_in</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to quickly initialise a uniform distribution of particles on a <ref refid="classNESO_1_1Particles_1_1CartesianHMesh" kindref="compound">CartesianHMesh</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mesh</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classNESO_1_1Particles_1_1CartesianHMesh" kindref="compound">CartesianHMesh</ref> on which to spawn particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">npart_per_cell</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of particle positions to sample for each mesh cell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">positions</parametername>
</parameternamelist>
<parameterdescription>
<para>Ouput particle positions indexed by dimension then particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cells</parametername>
</parameternamelist>
<parameterdescription>
<para>Ouput particle cell ids indexed by dimension then particle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rng_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional input RNG to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" line="115" column="13" bodyfile="/tmp/repo-checkout/NESO-Particles/include/utility.hpp" bodystart="115" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/repo-checkout/NESO-Particles/include/access.hpp" line="6" column="1"/>
  </compounddef>
</doxygen>
